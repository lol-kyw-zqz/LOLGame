package com.kyw.lolgames.utils;

import java.lang.reflect.Field;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author : kangyw
 * @date : 上午 10:48 2019/11/26
 */
public class JDBCUtils {

//    private static String connect;
//    private static String driverClassName;
//    private static String URL;
//    private static String username;
//    private static String password;

    private static boolean autoCommit;

    /**声明一个静态的connection属性，用来缓存已经存在的连接对象*/
    private static Connection connection;

//    static {
//        config();
//    }
//
//    /**
//     * 配置数据库信息
//     */
//    private static void config() {
//        ResourceBundle bundle = ResourceBundle.getBundle("jdbc");
//        URL = bundle.getString("url").trim();
//        driverClassName = bundle.getString("driver").trim();
//        username = bundle.getString("username").trim();
//        password = bundle.getString("password").trim();
//
//        // 设置是否自动提交，一般是false不自动提交
//        autoCommit = false;
//    }
//
//    /**
//     * 载入数据库驱动类
//     */
//    private static boolean load(){
//        try {
//            Class.forName(driverClassName);
//            return true;
//        }catch (ClassNotFoundException e){
//            System.out.println("驱动类 " + driverClassName + " 加载失败");
//        }
//        return false;
//    }
//
//    /**
//     * 检查连接是否不可以使用，如果不能使用的话返回true
//     */
//    private static boolean invalid(){
//        if(connection != null){
//
//            try {
//                if(connection.isClosed() || !connection.isValid(3)){
//                    return true;
//                }
//            } catch (SQLException e) {
//                e.printStackTrace();
//            }
//
//            return false;
//        }else{
//            return true;
//        }
//    }
//
//    /**
//     * 建立数据库连接
//     * @return
//     */
//    public static Connection connect(){
//        // 当为true时，说明连接失败，需要重新创建新的连接
//        if(invalid()){
//            // 加载驱动
//            load();
//            try {
//                connection = DriverManager.getConnection(URL,username,password);
//            } catch (SQLException e) {
//                System.out.println("建立 " + connect + " 数据库连接失败 , " + e.getMessage());
//            }
//        }
//        return connection;
//    }

    public static Connection connect(){
        return connection = ConnectionPool.getConnection();
    }

    /**
     * 设置是否自动提交事务
     */
    public static void transaction(){
        try {
            connection.setAutoCommit(autoCommit);
        } catch (SQLException e) {
            System.out.println("设置事务的提交方式为 : " + (autoCommit ? "自动提交" : "手动提交") + " 时失败: " + e.getMessage());
        }
    }

    /**
     * 创建Statement对象
     * @return
     */
    public static Statement statement(){
        Statement st = null;
        // 创建Statement前需要先保证Connection是可连接状态
        connect();
        // 设置事务提交方式
        transaction();
        try {
           st = connection.createStatement();
        } catch (SQLException e) {
            System.out.println("创建 Statement 对象失败: " + e.getMessage());
        }
        return st;
    }

    /**
     * 根据给出带占位符参数的sql，创建PreparedStatement对象
     * @param sql 带参数占位符的SQL语句
     * @param autoGeneratedKeys 主键是否自动生成
     * @return
     */
    private static PreparedStatement prepare(String sql, boolean autoGeneratedKeys) {
        PreparedStatement ps = null;
        // 创建Statement前需要先保证Connection是可连接状态
        connect();
        // 设置事务提交方式
        transaction();
        try {
            if (autoGeneratedKeys) {
                ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            } else {
                ps = connection.prepareStatement(sql);
            }
        } catch (SQLException e) {
            System.out.println("创建 PreparedStatement 对象失败: " + e.getMessage());
        }
        return ps;
    }

    /**
     * 根据入参拼sql,查询功能
     * @param sql
     * @param params
     * @return
     */
    public static List query(String sql, List<Object> params,Class clazz){
        if(sql == null || sql.trim().isEmpty() || !sql.trim().toLowerCase().startsWith("select")){
            throw new RuntimeException("你的SQL语句为空或不是查询语句");
        }
        ResultSet rs = null;
        List result = null;
        if(params!=null && params.size()>0){
            // 有参数传入的，需要处理
            PreparedStatement ps = prepare(sql, false);
            try {
                for (int i = 0; i < params.size(); i++) {
                    ps.setObject(i + 1, params.get(i));
                }
                rs = ps.executeQuery();
                result = JDBCUtils.rsToEntity(rs, clazz);
            }catch (Exception e){
                System.out.println("执行SQL失败: " + e.getMessage());
            }finally {
                release(rs);
                release(ps);
                release(connection);
            }
        }else {
            Statement statement = statement();
            try {
                rs = statement.executeQuery(sql);
                result = JDBCUtils.rsToEntity(rs, clazz);
            } catch (Exception e) {
                System.out.println("执行SQL失败: " + e.getMessage());
            }finally {
                release(rs);
                release(statement);
                release(connection);
            }
        }
        return result;
    }

    private static Object typeOf(Object o){
        Object r = o;
        if(o instanceof Timestamp){
            return r;
        }

        //将java.util.Date转换成java.sql.Date
        if(o instanceof java.util.Date){
            Date d = new Date(((java.util.Date) o).getTime());
            r = d;
            return r;
        }

        // 将 Character 或 char 变成 String
        if (o instanceof Character || o.getClass() == char.class) {
            r = String.valueOf(o);
            return r;
        }
        return r;
    }

    /**
     * 执行sql的更新操作
     * @param sql
     * @param params
     * @return
     */
    public static boolean execute(String sql,Object... params){
        if (sql == null || sql.trim().isEmpty() || sql.trim().toLowerCase().startsWith("select")) {
            throw new RuntimeException("你的SQL语句为空或有错");
        }

        // 表示执行DML 或DDL操作是否成功的一个标识
        boolean r = false;
        sql = sql.trim().toLowerCase();
        String prefix = sql.substring(0,sql.indexOf(" "));
        // 定义用户用来操作类型
        String operation = "";
        switch (prefix){
            case "create":
                operation = "create table";
                break;
            case "alter":
                operation = "update table";
                break;
            case "drop":
                operation = "drop table";
                break;
            case "truncate":
                operation = "truncate table";
                break;
            case "insert":
                operation = "insert :";
                break;
            case "update":
                operation = "update :";
                break;
            case "delete":
                operation = "delete :";
                break;
        }

        if(params.length>0){
            PreparedStatement ps = prepare(sql, false);
            Connection c = null;
            try {
                c = ps.getConnection();

                for(int i=0; i<params.length; i++){
                    Object temp = params[i];
                    temp = typeOf(temp);
                    ps.setObject(i+1,temp);
                }
                ps.executeUpdate();
                commit(c);
                r = true;
            } catch (SQLException e) {
                System.out.println(operation + " 失败: " + e.getMessage());
                rollback(c);
            }
        }else{
            Statement statement = statement();
            Connection c = null;
            try {
                c = statement.getConnection();
                statement.executeUpdate(sql);
                commit(c);
                r = true;
            } catch (SQLException e) {
                System.out.println(operation + " 失败: " + e.getMessage());
                rollback(c);
            }
        }
        return r;
    }

    /**
     *
     * @param SQL 需要执行的 INSERT 语句
     *
     * @param autoGeneratedKeys 指示是否需要返回由数据库产生的键
     *
     * @param params 将要执行的SQL语句中包含的参数占位符的 参数值
     *
     * @return 如果指定 autoGeneratedKeys 为 true 则返回由数据库产生的键； 如果指定 autoGeneratedKeys
     * 为 false 则返回受当前SQL影响的记录数目
     */
    public static int insert(String SQL, boolean autoGeneratedKeys, List<Object> params) {
        int var = -1;
        if (SQL == null || SQL.trim().isEmpty()) {
            throw new RuntimeException("你没有指定SQL语句，请检查是否指定了需要执行的SQL语句");
        }
        // 如果不是 insert 开头开头的语句
        if (!SQL.trim().toLowerCase().startsWith("insert")) {
            System.out.println(SQL.toLowerCase());
            throw new RuntimeException("你指定的SQL语句不是插入语句，请检查你的SQL语句");
        }
        // 获得 被执行的 SQL 语句的 前缀 ( 第一个单词 )
        SQL = SQL.trim();
        SQL = SQL.toLowerCase();
        // 说明有参数
        if (params.size() > 0) {
            PreparedStatement ps = prepare(SQL, autoGeneratedKeys);
            Connection c = null;
            try {
                // 从 PreparedStatement 对象中获得 它对应的连接对象
                c = ps.getConnection();
                for (int i = 0; i < params.size(); i++) {
                    Object p = params.get(i);
                    p = typeOf(p);
                    ps.setObject(i + 1, p);
                }
                int count = ps.executeUpdate();
                // 如果希望获得数据库产生的键
                if (autoGeneratedKeys) {
                    // 获得数据库产生的键集
                    ResultSet rs = ps.getGeneratedKeys();
                    // 因为是保存的是单条记录，因此至多返回一个键
                    if (rs.next()) {
                        // 获得值并赋值给 var 变量
                        var = rs.getInt(1);
                    }
                } else {
                    // 如果不需要获得，则将受SQL影响的记录数赋值给 var 变量
                    var = count;
                }
                commit(c);
            } catch (SQLException e) {
                System.out.println("数据保存失败: " + e.getMessage());
                rollback(c);
            }
        }else {
            Statement st = statement();
            Connection c = null;
            try {
                // 从 Statement 对象中获得 它对应的连接对象
                c = st.getConnection();
                // 执行 DDL 或 DML 语句，并返回执行结果
                int count = st.executeUpdate(SQL);
                // 如果企望获得数据库产生的键
                if (autoGeneratedKeys) {
                    ResultSet rs = st.getGeneratedKeys();
                    if (rs.next()) {
                        var = rs.getInt(1);
                    }
                } else {
                    var = count;
                }
                // 提交事务
                commit(c);
            } catch (SQLException e) {
                System.out.println("数据保存失败: " + e.getMessage());
                // 回滚事务
                rollback(c);
            }
        }
        return var;
    }

    /** 提交事务 */
    private static void rollback(Connection c) {
        if(c != null && !autoCommit){
            try {
                c.commit();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /** 回滚事务 */
    private static void commit(Connection c) {
        if (c != null && !autoCommit) {
            try {
                c.rollback();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * 释放资源
     **/
    public static void release(Object cloaseable) {
        if (cloaseable != null) {
            if (cloaseable instanceof ResultSet) {
                ResultSet rs = (ResultSet) cloaseable;
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (cloaseable instanceof Statement) {
                Statement st = (Statement) cloaseable;
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (cloaseable instanceof Connection) {
                Connection c = (Connection) cloaseable;
                try {
                    ConnectionPool.returnConnection(c);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * 将rs结果转换成对象列表
     * @param rs jdbc结果集
     * @param clazz 对象的映射类
     * return 封装了对象的结果列表
     */
    public static List rsToEntity(ResultSet rs , Class clazz)
            throws SQLException, InstantiationException, IllegalAccessException{
        //结果集的元素对象
        ResultSetMetaData rsmd = rs.getMetaData();
        //获取结果集的字段的个数
        int columnCount= rsmd.getColumnCount();
        //返回结果的列表集合
        List list = new ArrayList();
        //Entity字段列表
        Field[] fields = clazz.getDeclaredFields();
        // 对每一条记录进行操作
        while(rs.next()){
            //构造Entity实体，每一个rs对应一个entity对象存储数据
            Object obj = clazz.newInstance();
            //将每一个字段取出进行赋值
            for(int i = 1;i<=columnCount;i++){
                //结果集的某一元素的值
                Object value = rs.getObject(i);
                //寻找该元素对应的字段属性
                for(int j=0;j<fields.length;j++){
                    Field f = fields[j];
                    //根据字段名称遍历，如果匹配进行赋值
                    if(f.getName().equalsIgnoreCase(rsmd.getColumnName(i))){
                        boolean flag = f.isAccessible();
                        f.setAccessible(true);
                        //字段的obj即该字段的值
                        f.set(obj, value);
                        f.setAccessible(flag);
                    }
                }
            }
            list.add(obj);
        }
        return list;
    }

}
